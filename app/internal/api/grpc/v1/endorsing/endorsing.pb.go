// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/v1/endorsing/endorsing.proto

package endorsing

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Endorsement struct {
	Block                string   `protobuf:"bytes,1,opt,name=Block,proto3" json:"Block,omitempty"`
	SignedOperation      string   `protobuf:"bytes,2,opt,name=SignedOperation,proto3" json:"SignedOperation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Endorsement) Reset()         { *m = Endorsement{} }
func (m *Endorsement) String() string { return proto.CompactTextString(m) }
func (*Endorsement) ProtoMessage()    {}
func (*Endorsement) Descriptor() ([]byte, []int) {
	return fileDescriptor_56baa0b277966be3, []int{0}
}

func (m *Endorsement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endorsement.Unmarshal(m, b)
}
func (m *Endorsement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endorsement.Marshal(b, m, deterministic)
}
func (m *Endorsement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endorsement.Merge(m, src)
}
func (m *Endorsement) XXX_Size() int {
	return xxx_messageInfo_Endorsement.Size(m)
}
func (m *Endorsement) XXX_DiscardUnknown() {
	xxx_messageInfo_Endorsement.DiscardUnknown(m)
}

var xxx_messageInfo_Endorsement proto.InternalMessageInfo

func (m *Endorsement) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *Endorsement) GetSignedOperation() string {
	if m != nil {
		return m.SignedOperation
	}
	return ""
}

type EndorsementResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndorsementResponse) Reset()         { *m = EndorsementResponse{} }
func (m *EndorsementResponse) String() string { return proto.CompactTextString(m) }
func (*EndorsementResponse) ProtoMessage()    {}
func (*EndorsementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56baa0b277966be3, []int{1}
}

func (m *EndorsementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndorsementResponse.Unmarshal(m, b)
}
func (m *EndorsementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndorsementResponse.Marshal(b, m, deterministic)
}
func (m *EndorsementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndorsementResponse.Merge(m, src)
}
func (m *EndorsementResponse) XXX_Size() int {
	return xxx_messageInfo_EndorsementResponse.Size(m)
}
func (m *EndorsementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndorsementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndorsementResponse proto.InternalMessageInfo

func (m *EndorsementResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EndorsementResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type EndorsementStream struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndorsementStream) Reset()         { *m = EndorsementStream{} }
func (m *EndorsementStream) String() string { return proto.CompactTextString(m) }
func (*EndorsementStream) ProtoMessage()    {}
func (*EndorsementStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_56baa0b277966be3, []int{2}
}

func (m *EndorsementStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndorsementStream.Unmarshal(m, b)
}
func (m *EndorsementStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndorsementStream.Marshal(b, m, deterministic)
}
func (m *EndorsementStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndorsementStream.Merge(m, src)
}
func (m *EndorsementStream) XXX_Size() int {
	return xxx_messageInfo_EndorsementStream.Size(m)
}
func (m *EndorsementStream) XXX_DiscardUnknown() {
	xxx_messageInfo_EndorsementStream.DiscardUnknown(m)
}

var xxx_messageInfo_EndorsementStream proto.InternalMessageInfo

type Subscribe struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_56baa0b277966be3, []int{3}
}

func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (m *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(m, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*Endorsement)(nil), "endorsing.Endorsement")
	proto.RegisterType((*EndorsementResponse)(nil), "endorsing.EndorsementResponse")
	proto.RegisterType((*EndorsementStream)(nil), "endorsing.EndorsementStream")
	proto.RegisterType((*Subscribe)(nil), "endorsing.Subscribe")
}

func init() {
	proto.RegisterFile("grpc/v1/endorsing/endorsing.proto", fileDescriptor_56baa0b277966be3)
}

var fileDescriptor_56baa0b277966be3 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xdd, 0x4a, 0x03, 0x31,
	0x10, 0x85, 0xbb, 0xf5, 0xa7, 0xee, 0x88, 0xa8, 0xd3, 0x22, 0x4b, 0x11, 0x7f, 0x72, 0xd5, 0xab,
	0xd6, 0xea, 0x13, 0xa8, 0x88, 0x57, 0x22, 0xec, 0x3e, 0x41, 0x37, 0x3b, 0x2c, 0x41, 0x9b, 0x2c,
	0x93, 0xa4, 0x0f, 0xe2, 0x13, 0x8b, 0x69, 0xda, 0x06, 0xe9, 0xdd, 0x39, 0x67, 0x98, 0x2f, 0x27,
	0x03, 0xf7, 0x2d, 0x77, 0x72, 0xb6, 0x9a, 0xcf, 0x48, 0x37, 0x86, 0xad, 0xd2, 0xed, 0x4e, 0x4d,
	0x3b, 0x36, 0xce, 0x60, 0xbe, 0x0d, 0xc4, 0x07, 0x9c, 0xbe, 0x05, 0x43, 0x4b, 0xd2, 0x0e, 0x47,
	0x70, 0xf4, 0xf2, 0x6d, 0xe4, 0x57, 0x91, 0xdd, 0x65, 0x93, 0xbc, 0x5c, 0x1b, 0x9c, 0xc0, 0x79,
	0xa5, 0x5a, 0x4d, 0xcd, 0x67, 0x47, 0xbc, 0x70, 0xca, 0xe8, 0xa2, 0x1f, 0xe6, 0xff, 0x63, 0xf1,
	0x0c, 0xc3, 0x04, 0x57, 0x92, 0xed, 0x8c, 0xb6, 0x84, 0x05, 0x0c, 0xac, 0x97, 0x92, 0xac, 0x0d,
	0xe0, 0x93, 0x72, 0x63, 0xf1, 0x02, 0x0e, 0x88, 0x39, 0xe2, 0xfe, 0xa4, 0x18, 0xc2, 0x65, 0x82,
	0xa8, 0x1c, 0xd3, 0x62, 0x29, 0x6e, 0x21, 0xaf, 0x7c, 0x6d, 0x25, 0xab, 0x9a, 0x10, 0xe1, 0xd0,
	0x7b, 0xd5, 0xc4, 0x8e, 0x41, 0x3f, 0xfe, 0x64, 0xd0, 0x5f, 0xcd, 0xf1, 0x15, 0x06, 0x71, 0x19,
	0xaf, 0xa6, 0xbb, 0x6f, 0x27, 0xc0, 0xf1, 0xcd, 0xfe, 0x7c, 0xd3, 0x55, 0xf4, 0xf0, 0x1d, 0xce,
	0xe2, 0x60, 0xfd, 0x3a, 0x8e, 0x92, 0x95, 0x6d, 0x8d, 0xf1, 0xf5, 0x7e, 0x50, 0x6c, 0xdc, 0x7b,
	0xc8, 0xea, 0xe3, 0x70, 0xee, 0xa7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x84, 0x94, 0x60,
	0x93, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type V1Client interface {
	Endorse(ctx context.Context, in *Endorsement, opts ...grpc.CallOption) (*EndorsementResponse, error)
	EndorseStream(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (V1_EndorseStreamClient, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) Endorse(ctx context.Context, in *Endorsement, opts ...grpc.CallOption) (*EndorsementResponse, error) {
	out := new(EndorsementResponse)
	err := c.cc.Invoke(ctx, "/endorsing.v1/Endorse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) EndorseStream(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (V1_EndorseStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[0], "/endorsing.v1/EndorseStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1EndorseStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_EndorseStreamClient interface {
	Recv() (*EndorsementStream, error)
	grpc.ClientStream
}

type v1EndorseStreamClient struct {
	grpc.ClientStream
}

func (x *v1EndorseStreamClient) Recv() (*EndorsementStream, error) {
	m := new(EndorsementStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1Server is the server API for V1 service.
type V1Server interface {
	Endorse(context.Context, *Endorsement) (*EndorsementResponse, error)
	EndorseStream(*Subscribe, V1_EndorseStreamServer) error
}

// UnimplementedV1Server can be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (*UnimplementedV1Server) Endorse(ctx context.Context, req *Endorsement) (*EndorsementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endorse not implemented")
}
func (*UnimplementedV1Server) EndorseStream(req *Subscribe, srv V1_EndorseStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EndorseStream not implemented")
}

func RegisterV1Server(s *grpc.Server, srv V1Server) {
	s.RegisterService(&_V1_serviceDesc, srv)
}

func _V1_Endorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endorsement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).Endorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endorsing.v1/Endorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).Endorse(ctx, req.(*Endorsement))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_EndorseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).EndorseStream(m, &v1EndorseStreamServer{stream})
}

type V1_EndorseStreamServer interface {
	Send(*EndorsementStream) error
	grpc.ServerStream
}

type v1EndorseStreamServer struct {
	grpc.ServerStream
}

func (x *v1EndorseStreamServer) Send(m *EndorsementStream) error {
	return x.ServerStream.SendMsg(m)
}

var _V1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "endorsing.v1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endorse",
			Handler:    _V1_Endorse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EndorseStream",
			Handler:       _V1_EndorseStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/v1/endorsing/endorsing.proto",
}
